package penrose.parser;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;

public class SVGParser {
    private static int CIRCLE = 0;
    private static int LINE = 1;
    private static int POLYLINE = 2;
    private static int ARC = 3;

    private static String CIRCLE_STRING = "<!-- Circle -->";
    private static String LINE_STRING = "<!-- Line -->";
    private static String POLYLINE_STRING = "<!-- Polyline -->";
    private static String ARC_STRING = "<!-- Arc -->";


    public static SVG parse(String path) {
        SVG svg = new SVG();

        try {
            BufferedReader br = new BufferedReader(new FileReader(path));
            String line;
            int count = 0;
            int nextElement = -1;


            while ((line = br.readLine()) != null) {

                if (count == 0) {
                    svg.header = line; //<?xml version="1.0" encoding="UTF-8"?>
                } else if (count == 1) {
                    svg.headerComment = line; //<!-- 2020-12-13 16:26:26 Generated by QCAD SVG Exporter -->
                } else if (count == 2) {
                    int pos = line.indexOf("width=\"");
                    String svgWidth = line.substring(pos + 7, line.indexOf("mm", pos + 1));
                    svg.width = Double.parseDouble(svgWidth);

                    pos = line.indexOf("height=\"");
                    String svgHeight = line.substring(pos + 8, line.indexOf("mm", pos + 1));
                    svg.height = Double.parseDouble(svgHeight);

                    pos = line.indexOf("viewBox=\"");
                    String vb = line.substring(pos + 9, line.indexOf("\" version="));
                    String[] vbSplit = vb.split(" ");
                    svg.viewBox = new Rectangle(Double.parseDouble(vbSplit[0]),
                            Double.parseDouble(vbSplit[1]), Double.parseDouble(vbSplit[2]),
                            Double.parseDouble(vbSplit[3]));
                    line = line.replace(vb, "VIEWBOX");
                    line = line.replace(svgWidth, "SVG_WIDTH");
                    line = line.replace(svgHeight, "SVG_HEIGHT");

                    svg.viewBoxString = line;
                } else if (count == 3) {
                    svg.transform = line;
                } else {
                    if (line.contains("<!--")) {
                        if (line.contains(CIRCLE_STRING)) {
                            nextElement = CIRCLE;
                        } else if (line.contains(LINE_STRING)) {
                            nextElement = LINE;
                        } else if (line.contains(POLYLINE_STRING)) {
                            nextElement = POLYLINE;
                        } else if (line.contains(ARC_STRING)) {
                            nextElement = ARC;
                        } else {
                            System.out.println("Can't parse: " + line);
                        }
                    } else {
                        if (nextElement != -1 || (!line.contains("</g>") && !line.contains("</svg>"))) {
                            switch (nextElement) {
                                case -1: {
                                    System.out.println("Can't parse line:" + line);
                                    break;
                                }
                                case 0: {
                                    //parsing a circle
                                    //<circle cx="2414.568908900961" cy="21.246664307676838" r="2.000000000000001" style="stroke:#ffff00;stroke-width:0;"/>
                                    Circle c = new Circle();

                                    int pos = line.indexOf("cx=\"");
                                    c.cx = Double.parseDouble(line.substring(pos + 4, line.indexOf("\" cy", pos)));
                                    pos = line.indexOf("cy=\"");
                                    c.cy = Double.parseDouble(line.substring(pos + 4, line.indexOf("\" r", pos)));
                                    pos = line.indexOf("r=\"");
                                    c.r = Double.parseDouble(line.substring(pos + 3, line.indexOf("\" style=", pos)));

                                    pos = line.indexOf("stroke:");
                                    c.stroke = line.substring(pos + 7, line.indexOf(";stroke-width", pos));

                                    pos = line.indexOf(";stroke-width:");
                                    c.srokeWidth = line.substring(pos + 14, line.indexOf(";", pos + 1));
                                    c.postText = line.substring(line.indexOf("\" style"));
                                    svg.addShape(c);
                                    break;
                                }
                                case 1: {
                                    //parsing a line
                                    // <path d="M2461.631437045716,-11.034320435717746 L2439.7114857421884,-11.034320432958339 " style="stroke:#ffff00;stroke-width:0;"/>
                                    Line l = new Line();
                                    int pos = line.indexOf("d=\"M");
                                    int pos2 = line.indexOf(",", pos + 1);
                                    l.x1 = Double.parseDouble(line.substring(pos + 4, pos2));
                                    pos = line.indexOf(" L", pos2);
                                    l.y1 = Double.parseDouble(line.substring(pos2 + 1, pos));
                                    pos2 = line.indexOf(",", pos + 1);
                                    l.x2 = Double.parseDouble(line.substring(pos + 2, pos2));
                                    pos = line.indexOf(" \" style=\"", pos2);
                                    l.y2 = Double.parseDouble(line.substring(pos2 + 1, pos));

                                    pos = line.indexOf("stroke:");
                                    l.stroke = line.substring(pos + 7, line.indexOf(";stroke-width", pos));

                                    pos = line.indexOf(";stroke-width:");
                                    l.srokeWidth = line.substring(pos + 14, line.indexOf(";", pos + 1));
                                    l.postText = line.substring(line.indexOf("\" style"));
                                    svg.addShape(l);
                                    break;
                                }
                                case 2: {
                                    //parsing polyline
                                    //<path d="M2480.731535364971,42.74420479111882 L2414.568908900961,21.246664307675246 L2431.0355510624245,-6.66851793388264 L2483.801187128146,10.476076499847068 L2480.731158445572,42.74408232258247" style="stroke:#c0c0c0;stroke-width:0;"/>
                                    String temp1 = line.substring(line.indexOf("path d=\"M") + 9, line.indexOf("\" style=")).replace(" L", ",");
                                    Polyline pl = new Polyline();
                                    pl.closed = temp1.contains("Z");
                                    if (pl.closed) {
                                        temp1 = temp1.replace("Z", "");
                                    }
                                    String[] temp = temp1.split(",");

                                    for (int i = 0; i < temp.length; i += 2) {
                                        double x = Double.parseDouble(temp[i]);
                                        double y = Double.parseDouble(temp[i + 1]);
                                        pl.points.add(new Point(x, y));
                                    }
                                    int pos = line.indexOf("stroke:");
                                    pl.stroke = line.substring(pos + 7, line.indexOf(";stroke-width", pos));

                                    pos = line.indexOf(";stroke-width:");
                                    pl.srokeWidth = line.substring(pos + 14, line.indexOf(";", pos + 1));
                                    pl.postText = line.substring(line.indexOf("\" style"));
                                    svg.addShape(pl);
                                    break;
                                }
                                case 3: {
                                    //parsing arc
                                    //<path d="M2323.6645929404526,151.67063692480852 A217.6049999998607,217.6049999998607 0 0,0 2344.3877939942204,159.59320640440447 " style="stroke:#ff0000;stroke-width:0;"/>
                                    Arc arc = new Arc();
                                    arc.start = new Point();

                                    int pos = line.indexOf("d=\"M");
                                    int pos2 = line.indexOf(",", pos + 1);
                                    arc.start.x = Double.parseDouble(line.substring(pos + 4, pos2));
                                    pos = line.indexOf(" A", pos2);
                                    arc.start.y = Double.parseDouble(line.substring(pos2 + 1, pos));

                                    String[] sub = line.substring(pos + 2, line.indexOf(" \" style", pos)).replace(" ", ",").split(",");
                                    for (int i = 0; i < 7; i++) {
                                        arc.pos[i] = Double.parseDouble(sub[i]);
                                    }

                                    pos = line.indexOf("stroke:");
                                    arc.stroke = line.substring(pos + 7, line.indexOf(";stroke-width", pos));

                                    pos = line.indexOf(";stroke-width:");
                                    arc.srokeWidth = line.substring(pos + 14, line.indexOf(";", pos + 1));
                                    arc.postText = line.substring(line.indexOf("\" style"));

                                    svg.addShape(arc);
                                    break;
                                }
                                default: {
                                    System.out.println("Can't parse line:" + line);
                                }
                            }
                            nextElement = -1;
                        }
                    }
                }
                count++;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        System.out.println("Found " + svg.shapeSize() + " shapes: (" + svg.circles.size() + " circles, " + svg.lines.size() + " lines, " + svg.poly.size() + " poly, " + svg.arcs.size() + " arcs)");
        return svg;
    }

    public static void export(SVG svg, String path, boolean sorted) {
        try {
            PrintWriter pw = new PrintWriter(new FileWriter(path));
            pw.println(svg.header);
            pw.println(svg.headerComment);

            String s = svg.viewBoxString;

//            line = line.replace(vb, "VIEWBOX");
//            line = line.replace(svgWidth, "SVG_WIDTH");
//            line = line.replace(svgHeight, "SVG_HEIGHT");

            s = s.replace("VIEWBOX", svg.viewBox.x1 + "," + svg.viewBox.y1 + "," + svg.viewBox.x2 + "," + svg.viewBox.y2);
            s = s.replace("SVG_WIDTH", svg.width + "");
            s = s.replace("SVG_HEIGHT", svg.height + "");
            pw.println(s);
            pw.println(svg.transform);

            if (sorted) {
                for (int i = 0; i < svg.circles.size(); i++) {
                    pw.println(svg.circles.get(i).toSvg());
                }
                for (int i = 0; i < svg.lines.size(); i++) {
                    pw.println(svg.lines.get(i).toSvg());
                }
                for (int i = 0; i < svg.arcs.size(); i++) {
                    pw.println(svg.arcs.get(i).toSvg());
                }
                for (int i = 0; i < svg.poly.size(); i++) {
                    pw.println(svg.poly.get(i).toSvg());
                }
            } else {
                for (int i = 0; i < svg.shapes.size(); i++) {
                    pw.println(svg.shapes.get(i).toSvg());
                }
            }


            //at the end
            pw.println("    </g>\n" +
                    "</svg>");
            pw.close();
            int x = 0;

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
